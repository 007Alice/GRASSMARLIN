<?xml version="1.0" encoding="UTF-8"?>

<!--
  This is the ANT build script used internally for GrassMarlin development.
  By necessity, it is tightly coupled to the exact development environment used by the GrassMarlin team.  It is not expected to work outside that environment and is not supported for this reason.  It is provided here as a reference.

  NOTE: At the time this documentation was written, the Fingerprinting plugin was part of the core
  GrassMarlin code.  By the time you are reading this, Fingerprinting should have been migrated to
  a standalone Plugin.  The documentation may be slightly off as a result of this and, since it
  isn't supported, it falls to you to figure out the changes.  We do not expect any significant
  deviation, but take what is written here with a grain of salt.

  While you are free to use whatever environment you prefer, internal GrassMarlin development is performed on Windows workstations and utilizes the following tools that are not provided here, but that should be freely available online (most recent version is probably your best choice in all cases, except where noted otherwise):
    JetBrains IntelliJ IDEA
      - The directory in which this file is distributed is the root for a project.
      - Each of the directories within plugin_sources is the root for an additional module, which depends on the main project module.
        - The src directory for each plugin should be flagged as the Sources Root, with a default package matching the plugin's name.
      - The embedded_resources directories should be flaggged as a Resources Root
      - The generated-sources directory should be flagged as a Generated Sources Root
      - The source directory should be flagged as the Sources Root.
      - All other directories can be flagged as Excluded.
      - In order to execute the Generate Sources: Fingerprinting build step, you will need to go to the Ant Build interface's Properties dialog and, on the Execution tab, set the Ant command line to "-J-Djavax.xml.accessExternalSchema=file".
    Microsoft Visual Studio
      - This is used to build the C# applications in the tools directory.
      - The compiled tools should have the executables placed in the resources/tools directory.
      - The compiled tools are, at this time, only used for the User Guide and are called from the Generate sources: User Guide step.  If you have no reason to build the user guide you can delete that step and won't need the tools.
    GNU Image Manipulation Program (GIMP)
      - We use GIMP for most of our image work, and so the master image files are in GIMP's preferred ".xcf" format.
      - GIMP is in no way integrated into the workflow, so it is completely optional.
    JNetPcap
      - The JNetPcap library is used for Live Pcap functionality.
      - The jnetpcap.jar file should be in dir_application/lib.
      - The native JNetPcap library for your operating system should be in dir_application.
    Antlr
      - The Antlr JAR file should be in dir_application/lib.
      - We use Version 4.5; using the latest version is probably your best choice.
    Java 8 (JDK/JRE)
      - We use version 101.
      - The classpath.rt path defined below must point to a valid version of rt.jar
        - This is needed to resolve @NotNull and related annotations when compiling from Ant.
  Currently, the GrassMarlin development environment lacks resources for building installers.
-->
<!-- 3.3 Script -->
<project name="Grassmarlin" default="Build Plugins" basedir="." xmlns:if="ant:if">
    <property name="dir.build.root" value="release" />
    <property name="dir.build.root.temp" value="${dir.build.root}/temp" />

    <property name="dir.resources" value="resources" />
    <property name="dir.resources.application" value="dir_application" />
    <property name="dir.resources.internal" value="embedded_resources" />
    <property name="dir.tools.source" value="tools" />

    <property name="dir.redistributable" value="${dir.build.root}/redistributable" />

    <property name="output.jar" value="${dir.build.root}/GrassMarlin.jar" />

    <property name="exec.candle" value="C:/Program Files (x86)/WiX Toolset v3.9/bin/candle.exe"/>
    <property name="exec.light" value="C:/Program Files (x86)/WiX Toolset v3.9/bin/light.exe"/>

    <property name="dir.gen" value="generated-sources" />
    <property name="dir.lib" value="resources/lib"/>

    <property name="dir.source" value="source"/>
    <property name="dir.source.plugins" value="plugin sources" />
    <property name="dir.fingerprint.gen" value="${dir.source.plugins}/iadgov.fingerprint/generated-sources" />

    <property name="dir.resource.xsd" value="plugin sources/iadgov.fingerprint/embedded_resources/xsd"/>
    <property name="resource.calcGrammar" value="resources/grammar/Calc.g4"/>

    <!-- Classpaths -->
    <!-- We need the LIBs used in the main JAR -->
    <path id="classpath.lib">
        <fileset dir="${dir.resources.application}/lib">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <path id="jaxb.classpath">
        <fileset dir="resources/jaxb">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!-- We need the classpath of the GrassMarlin JAR for the plugins -->
    <path id="classpath.GrassMarlin">
        <pathelement location="${output.jar}" />
    </path>

    <!-- we also need the JRE's rt.jar file for some XML classes and annotations -->
    <path id="classpath.rt">
        <file file="C:\Program Files\Java\jre1.8.0_101\lib\rt.jar" />
    </path>

    <!-- This is used to generate sources for fingerprinting -->
    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
        <classpath refid="jaxb.classpath"/>
    </taskdef>


    <!-- 3.3 Build Targets -->
    <target name="Clean">
        <delete dir="${dir.build.root}" />
        <mkdir dir="${dir.build.root}" />

        <condition property="logsDirectoryExists">
            <available file="dir_app_data/logs" type="dir"/>
        </condition>

        <delete if:true="${logsDirectoryExists}">
            <fileset dir="dir_app_data/logs" includes="*.log" />
        </delete>

        <!-- clean up plugin directory -->
        <delete dir="${dir.resources.application}/plugins" />
        <mkdir dir="${dir.resources.application}/plugins" />

        <!-- Clear generated sources -->
        <delete dir="${dir.gen}" />
        <mkdir dir="${dir.gen}" />
    </target>

    <target name="Full Release" depends="Release to GitHub,Release to Isolated Dev Workstation,Redistributable" description="Prepare all outputs for exporting a version from the dev network.">
        <!-- everything is handled by the prereqs.-->
    </target>

    <target name="Redistributable" depends="Clean" description="Construct the redistributable directory">
        <mkdir dir="${dir.redistributable}" />
    </target>

    <target name="Application Directory" depends="Clean,Generate Sources,Build Jar,Redistributable" description="Prepare the application release directory (no livepcap DLL)">
        <mkdir dir="${dir.redistributable}/GrassMarlin3.3" />

        <copyfile src="${output.jar}" dest="${dir.redistributable}/GrassMarlin3.3/grassmarlin.jar" />
        <copydir src="${dir.resources.application}" dest="${dir.redistributable}/GrassMarlin3.3" />
    </target>

    <target name="Release to Isolated Dev Workstation" depends="Application Directory" description="Prepare all resources for burning a standalone dev CD">
        <mkdir dir="${dir.redistributable}/dev" />

        <mkdir dir="${dir.redistributable}/dev/GrassMarlin3.3" />
        <copyfile src="build-ant.xml" dest="${dir.redistributable}/dev/GrassMarlin3.3/build-ant.xml" />
        <copyfile src="GrassMarlin3.3.iml" dest="${dir.redistributable}/dev/GrassMarlin3.3/GrassMarlin3.3.iml" />

        <mkdir dir="${dir.redistributable}/dev/GrassMarlin3.3/${dir.source}" />
        <copydir src="${dir.source}" dest="${dir.redistributable}/dev/GrassMarlin3.3/${dir.source}" />

        <mkdir dir="${dir.redistributable}/dev/GrassMarlin3.3/generated-sources" />
        <copydir src="${dir.source}" dest="${dir.redistributable}/dev/GrassMarlin3.3/generated-sources" />

        <mkdir dir="${dir.redistributable}/dev/GrassMarlin3.3/installers" />
        <copydir src="${dir.source}" dest="${dir.redistributable}/dev/GrassMarlin3.3/installers" />

        <mkdir dir="${dir.redistributable}/dev/GrassMarlin3.3/${dir.resources.internal}" />
        <copydir src="${dir.resources.internal}" dest="${dir.redistributable}/dev/GrassMarlin3.3/${dir.resources.internal}" />

        <mkdir dir="${dir.redistributable}/dev/GrassMarlin3.3/${dir.resources.application}" />
        <copydir src="${dir.resources.application}" dest="${dir.redistributable}/dev/GrassMarlin3.3/${dir.resources.application}" />

        <mkdir dir="${dir.redistributable}/dev/GrassMarlin3.3/${dir.resources}" />
        <copy todir="${dir.redistributable}/dev/GrassMarlin3.3/${dir.resources}">
            <fileset dir="${dir.resources}">
                <!--<exclude name="**/tools/*.exe" />-->
                <exclude name="**/tools/*.pdb" />
            </fileset>
        </copy>

        <mkdir dir="${dir.redistributable}/dev/GrassMarlin3.3/${dir.tools.source}" />
        <copy todir="${dir.redistributable}/dev/GrassMarlin3.3/${dir.tools.source}">
            <fileset dir="${dir.tools.source}">
                <exclude name="**/.vs/**" />
                <exclude name="**/bin/**" />
                <exclude name="**/obj/**" />
            </fileset>
        </copy>

        <!-- HACK: We delete the libs and dlls -->
        <delete file="${dir.redistributable}/dev/GrassMarlin3.3/dir_application/lib/antlr-4.5-complete.jar" />
        <delete file="${dir.redistributable}/dev/GrassMarlin3.3/dir_application/lib/jnetpcap.jar" />
        <delete file="${dir.redistributable}/dev/GrassMarlin3.3/dir_application/jnetpcap.dll" />

        <mkdir dir="${dir.redistributable}/dev/GrassMarlin3.3/plugin sources" />
        <copy todir="${dir.redistributable}/dev/GrassMarlin3.3/plugin sources">
            <fileset dir="${dir.source.plugins}">
                <!--<exclude name="**/*.iml" />-->
            </fileset>
        </copy>
    </target>

    <target name="Release to GitHub" depends="Application Directory" description="Prepare all resources for release to GitHub">
        <mkdir dir="${dir.redistributable}/github" />
        <!-- TODO: stage root-level github files -->
        <mkdir dir="${dir.redistributable}/github/GM3" />
        <copyfile src="build-ant.xml" dest="${dir.redistributable}/github/GM3/build-ant.xml" />

        <mkdir dir="${dir.redistributable}/github/GM3/${dir.source}" />
        <copydir src="${dir.source}" dest="${dir.redistributable}/github/GM3/${dir.source}" />

        <mkdir dir="${dir.redistributable}/github/GM3/${dir.resources.internal}" />
        <copydir src="${dir.resources.internal}" dest="${dir.redistributable}/github/GM3/${dir.resources.internal}" />

        <mkdir dir="${dir.redistributable}/github/GM3/${dir.resources.application}" />
        <copydir src="${dir.resources.application}" dest="${dir.redistributable}/github/GM3/${dir.resources.application}" />

        <mkdir dir="${dir.redistributable}/github/GM3/${dir.resources}" />
        <copy todir="${dir.redistributable}/github/GM3/${dir.resources}">
            <fileset dir="${dir.resources}">
                <exclude name="**/tools/*.exe" />
                <exclude name="**/tools/*.pdb" />
            </fileset>
        </copy>

        <mkdir dir="${dir.redistributable}/github/GM3/${dir.tools.source}" />
        <copy todir="${dir.redistributable}/github/GM3/${dir.tools.source}">
            <fileset dir="${dir.tools.source}">
                <exclude name="**/.vs/**" />
                <exclude name="**/bin/**" />
                <exclude name="**/obj/**" />
            </fileset>
        </copy>

        <!-- HACK: We delete the libs and dlls -->
        <delete file="${dir.redistributable}/github/GM3/dir_application/lib/antlr-4.5-complete.jar" />
        <delete file="${dir.redistributable}/github/GM3/dir_application/lib/jnetpcap.jar" />
        <delete file="${dir.redistributable}/github/GM3/dir_application/jnetpcap.dll" />

        <mkdir dir="${dir.redistributable}/github/GM3/plugin sources" />
        <copy todir="${dir.redistributable}/github/GM3/plugin sources">
            <fileset dir="${dir.source.plugins}">
                <exclude name="**/*.iml" />
            </fileset>
        </copy>

        <!-- TODO: Build installers -->
    </target>

    <target name="Build Jar" depends="Clean,Generate Sources" description="Build GrassMarlin 3.3 JAR file.">
        <!-- compile to temp location -->
        <mkdir dir="${dir.build.root.temp}/classes" />
        <javac includeantruntime="false" srcdir="${dir.source}" destdir="${dir.build.root.temp}/classes" verbose="true" debug="false">
            <src path="${dir.gen}" />
            <classpath refid="classpath.lib" />
            <classpath refid="classpath.rt" />
        </javac>

        <jar destfile="${output.jar}" basedir="${dir.build.root.temp}/classes">
            <manifest>
                <attribute name="Main-Class" value="grassmarlin.Launcher"/>
                <attribute name="Permission" value="High"/>
            </manifest>
            <zipfileset dir="${dir.resources.internal}"/>
        </jar>

        <!-- cleanup temp files -->
        <delete dir="${dir.build.root.temp}/classes" />
    </target>

    <target name="Build Plugin">
        <mkdir dir="${dir.build.root.temp}/${plugin.name}" />

        <!-- create classpath for lib of plugin -->
        <path id="classpath.plugin.lib">
            <fileset dir="${dir.source.plugins}/${plugin.name}/lib">
                <include name="**/*.jar" />
            </fileset>
        </path>

        <javac includeantruntime="false" srcdir="${dir.source.plugins}/${plugin.name}" destdir="${dir.build.root.temp}/${plugin.name}" verbose="false" debug="true">
            <classpath refid="classpath.GrassMarlin" />
            <classpath refid="classpath.rt" if:set="plugin.requiresruntime"/>
            <classpath refid="classpath.plugin.lib" if:set="plugin.haslib"/>
        </javac>

        <condition property="plugin.hasresources">
            <available file="${dir.source.plugins}/${plugin.name}/embedded_resources" type="dir"/>
        </condition>

        <jar destfile="${dir.build.root}/${plugin.name}.jar" basedir="${dir.build.root.temp}/${plugin.name}">
            <zipfileset dir="${dir.source.plugins}/${plugin.name}/embedded_resources" if:true="${plugin.hasresources}"/>
            <zipgroupfileset dir="${dir.source.plugins}/${plugin.name}/lib/" includes="**/*.jar" if:set="plugin.haslib"/>
        </jar>
        <copy file="${dir.build.root}/${plugin.name}.jar" tofile="${dir.resources.application}/plugins/${plugin.name}.jar" />

        <delete dir="${dir.build.root.temp}/${plugin.name}" />
    </target>

    <target name="Build Plugins" depends="Build Jar" description="Build Plugin JAR files.">
        <!-- No direct content; everything is handled by dependencies -->
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.teamcolors" /></antcall>
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.importcompletealert" /></antcall>
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.diff" /></antcall>
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.visualpipeline" /></antcall>
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.logicalgraph.manualproperties" /></antcall>
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.logicalgraph.groupedports" /></antcall>
        <!--<antcall target="Build Plugin"><param name="plugin.name" value="iadgov.physical.cisco" /></antcall>-->
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.timefilter" /></antcall>
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.ping" /></antcall>
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.directorywatcher" /><param name="plugin.requiresruntime" value="" /></antcall>
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.bro2connparser" /></antcall>
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.active.querystatus" /></antcall>
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.example.tab" /></antcall>
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.siemens" /></antcall>
        <antcall target="Build Plugin"><param name="plugin.name" value="iadgov.fingerprint" /><param name="plugin.requiresruntime" value="" /><param name="plugin.haslib" value="" /><param name="hasresources" value="" /></antcall>
    </target>

    <target name="Generate Sources" depends="Clean,Generate Sources: Fingerprinting,Generate Sources: User Guide" description="Executes all generate sources targets.">
        <!-- Everything is handled by dependencies -->
    </target>

    <target name="Generate Sources: User Guide" depends="Clean" description="Run the User Guide preprocessor">
        <exec executable="resources/tools/UserGuidePreprocessing.exe" dir="resources">
            <arg value="UserGuide.html" />
            <arg value="../dir_application/UserGuide.html" />
        </exec>
    </target>
    <target name="Generate Sources: Fingerprinting" depends="Clean" description="Generate Fingerprinting Sources">
        <mkdir dir="${dir.fingerprint.gen}/util/parser"/>
        <java jar="${dir.lib}/antlr-4.5-complete.jar" fork="true">
            <arg value="-package"/>
            <arg value="util.parser"/>
            <arg value="-o"/>
            <arg value="${dir.fingerprint.gen}/util/parser"/>
            <arg value="${resource.calcGrammar}"/>
        </java>

        <mkdir dir="${dir.fingerprint.gen}/core/fingerprint3"/>
        <xjc extension="true" binding="${dir.resource.xsd}/serializable.xjb" schema="${dir.resource.xsd}/fingerprint3.xsd"
             package="core.fingerprint3" destdir="${dir.fingerprint.gen}">
            <produces dir="${dir.fingerprint.gen}/core/fingerprint3" includes="**/*.java"/>
        </xjc>
    </target>
</project>
