<?xml version="1.0" encoding="UTF-8"?>

<project name="GRASSMARLIN_FP" basedir=".">
	<description>
        simple example build file
    </description>

	<!-- set global properties for this build -->
	<property name="src" location="src" />
	<property name="testsrc" location="testsrc" />
	<property name="build" location="classes" />
	<property name="dist" location="dist" />
	<property name="doc" location="doc" />
	<property name="gen" location="gensrc" />
	<property name="resource" location="resource" />
	<property name="optimize" value="false" />
	<property name="debug" value="true" />
	<property name="temp" location="temp" />
	<property name="distribution" location="distribution" />


	<!-- define the various classpaths which serve different purposes -->
	<path id="build.classpath">
		<pathelement location="${build}" />
	</path>

	<path id="jaxb.classpath">
		<fileset dir="lib\jaxb">
			<include name="**/*.jar" />
		</fileset>
	</path>
    
    <path id="lib.classpath">
        <fileset dir="lib">
          <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- now define a higher level classpath to be actually used by the targets
         and contain the atomic ones listed above.  if another jar directory
         classpath is added, hook it in here.  this way we don&apos;t have to
         touch most of the target classpaths below. -->    
    <path id="runtime.classpath">
        <path refid="build.classpath"/>
        <path refid="lib.classpath"/>
        <path refid="jaxb.classpath"/>
    </path>
    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
        <mkdir dir="${gen}"/>
        <mkdir dir="${doc}"/>
        <mkdir dir="${testsrc}"/>

    	<copy  toDir="${build}/xsd" overwrite="true">
    		 <fileset dir="resource/xsd">
    		   <include name="**/*"/>
    		 </fileset>
    	</copy>
    </target>

	<target name="createGrassMarlinFingerPrintJAR" depends="compileSrc" description="build jar">
		<delete file="GM_FP.jar"/>
		<copy todir="${build}/sample">
			<file name="${src}/sample/sample.fxml"/>
			<file name="${src}/sample/Grassmarlincircleicon.png"/>
			<file name="${src}/sample/Grassmarlincirclesmall.png"/>
		</copy>
		<jar destfile="GM_FP.jar" basedir="${build}" compress="true">
			<manifest>
			<attribute name="Main-Class" value="sample.Main"/>
			</manifest>
		</jar>
	</target>

	<target name="compileSrc" depends="compileGen" description="compile the source ">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" source="1.8" optimize="${optimize}" debug="${debug}">
			<classpath refid="runtime.classpath"/>
		</javac>
	</target>

	<target name="debugCompile" depends="compileGen" description="compile the source ">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" source="1.8" optimize="${optimize}" debug="true">
			<classpath refid="runtime.classpath"/>
		</javac>
	</target>

    <target name="compileGen" depends="genJaxb" description="compile generated source ">
        <javac srcdir="${gen}" destdir="${build}" source="1.8" optimize="${optimize}" debug="${debug}">
            <classpath refid="jaxb.classpath"/>
        </javac>
    </target>


    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
        <classpath refid="jaxb.classpath"/>
    </taskdef>    
    <target name="genJaxb" depends="init" description="generate jaxb src">        
    	
	<!-- fingerprint3.xsd -->
		<xjc schema="${resource}\xsd\fingerprint3.xsd" package="core.fingerprint3" destdir="${gen}">
			<produces dir="${gen}/core/fingerprint3" includes="**/*.java"/>
		</xjc>
    	
    </target>
	
    <target name="clean" description="clean up">
		<echo>Delete the ${build} and ${dist} directory trees</echo>
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
        <delete dir="${gen}"/>
    </target>
	


</project>
