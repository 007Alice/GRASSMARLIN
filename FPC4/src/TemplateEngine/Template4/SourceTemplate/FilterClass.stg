/*
 *     
 *  <PrefixedList(Items=Fingerprints, Prefix=Append("final", FingerprintClass), Postfix=";")>
 *  <PrefixedList(Items=Operations, Prefix=Append("final", OperationClass), Postfix=";")>
 */
 
group FilterClass;

import "Matrix.stg"

FilterClass(ClassName, ImplementingClass, CompilerClass, Imports, Entries, OperationCodes, FingerprintClass, OperationClass, ReturnType, FilterPackage, FilterCodes) ::= <<

<PrefixedList(Items=Imports, Prefix="import ", Postfix=";")>

public class <ClassName> implements <ImplementingClass><if(ReturnType)>\<<ReturnType>\><endif> {
    
    static final Integer[] EMPTY_INT = new Integer[0];
    static final <CompilerClass> compiler = <CompilerClass>.getCompiler();
    
    <DeclareEntries(Entries, {<FingerprintClass><if(ReturnType)>\<<ReturnType>\><endif>}, OperationClass, ReturnType)>
    <DeclareFilterCodes(FilterCodes)>
    
    public <ClassName>() {
        <InitializeEntries(Entries)>    }
    
    public <OperationClass><if(ReturnType)>\<<ReturnType>\><endif> getOperation(int hash) {
        <OperationClass>\<<ReturnType>\> op;
        switch(hash) {
            <SwitchOperationCodes(OperationCodes)>
            default: op = (t,a,b,c,s)-> System.err.println("FILTER-ERROR:OP-MISS"); break;
        }
        return op;
    }
    
    <FilterPackage:{ package |<RenderPackage(package)>}; separator="\n">
    
    @SuppressWarnings("unchecked")
    public <FingerprintClass><if(ReturnType)>\<<ReturnType>\><endif> load(String name) {
        <FingerprintClass><if(ReturnType)>\<<ReturnType>\><endif> fp = null;
        try {
            <FingerprintClass>\<?> generic = (<FingerprintClass>) compiler.getLoader().findClass(name).newInstance();
            fp = (<FingerprintClass><if(ReturnType)>\<<ReturnType>\><endif>) generic;
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(<ClassName>.class.getName()).log(Level.SEVERE, "GENERATED-SOURCE", ex);
        }
        return fp;
    }
}
>>

DeclareFilterCodes(Codes) ::= <<
<Codes:{ code | final Integer[] <first(code)> = new Integer[] <Array(last(code))>;}; separator="\n">
>>

Array(Array) ::= <<
{<Array:{ item |<item>}; separator=", ">}
>>

RenderPackage(Package) ::= <<
@Override
public Integer[] get<first(Package)>( int code ) {
    Integer[] codes;
    switch( code ) {
        <rest(Package):{ item |<RenderPackageItem(item)>}; separator="\n">
        default: codes = EMPTY_INT;
    \}
    return codes;
\}
>>

RenderPackageItem(Item) ::= <<
case <first(item)> : codes = <last(item)>; break;
>>

SwitchOperationCodes(Codes) ::= <<
<Codes:{ e | case <first(e)>: op = <last(e)>; break;}; separator="\n">
>>

InitializeEntries(Entries) ::= <<
<Entries:{ e |
<first(e)> = load("<first(e)>");
    <rest(e):{ op | <op> = <first(e)>.loadMethod("<op>");}; separator="\n">
}>
>>

DeclareEntries(Entries, FirstClass, SecondClass, ReturnType) ::= <<
<Entries:{ e |
final <FirstClass> <first(e)>;
    <PrefixedList(Items=rest(e), Prefix=Append("final", Generic(SecondClass, ReturnType)), Postfix=";")>
}>
>>

Generic(FirstClass,SecondClass) ::= <<
<FirstClass>\<<SecondClass>\>
>>