/*
 * A method/code block template for the Match operation.
 * Match will match a sequence of bytes or a regex on the string equivalent of the input.
 *
 */
group Match;

MatchFunction(Body, Depth=false, Offset=false, Relative=false, Within=false, MoveCursors=false, Pattern=false, Content=false) ::= <<


<if(Depth||Offset||Relative||Within)>
offset = <if(Depth)>Math.min(<Depth>,<endif><if(Relative)>cursor.get()<endif><if(Offset)><if(Relative)>+<endif><Offset><endif><if(Depth)>)<endif><if(Within)>-<Within><endif>;
length = <if(Relative&&Within)>Math.min(payload.end(),cursor.get()+<Within>)<else>payload.end()<endif>;
<else>
offset = 0;
length = payload.end();
<endif><\\>
<if(Pattern)>
string = payload.getString(offset, length);
matcher = null;
if( !string.isEmpty() && ( matcher = <Pattern>.matcher(string) ).matches() ) {
    <if(MoveCursors)>
    cursor.setA(matcher.start());
    cursor.setB(matcher.end());
    <endif>
    cursor.set(matcher.end());
    
    <if(Body)><Body><endif>
}
<elseif(Content)>
if( (location = payload.match(<Content>, offset, length)) != -1 ) {
    <if(MoveCursors)>
    cursor.setA(location);
    cursor.setB(location+<Content>.length);
    <endif>
    cursor.set(location);
    
    <if(Body)><Body><endif>
}
<endif>
>>